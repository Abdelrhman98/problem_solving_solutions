1) Sliding Window
2) Islands (Matrix Traversal)
3) Two Pointers
4) Fast & Slow Pointers
5) Merge Intervals
6) Cyclic Sort
7) In-place Reversal of a LinkedList
8) Tree Breadth-First Search
9) Tree Depth First Search
10) Two Heaps
11) Subsets
12) Modified Binary Search
13) Bitwise XOR
14) Top ‘K’ Elements
15) K-way Merge
16) Topological Sort
17) 0/1 Knapsack
18) Fibonacci Numbers
19) Palindromic Subsequence
20) Longest Common Substring


Don’t Just LeetCode: Follow the Coding Patterns Instead


Coding Interviews are becoming harder to pass. Many of us are preparing for SDE roles in top companies and it takes months of preparation. But what if we don't want to spend more time on it? So here is a smart solution for all -



The Problem - 
Everyone who is preparing DSA is well known about the platform called leetcode. But the problem is, it has a lot of questions to practice around 2k+ which needs a lot of time to solve and no one really likes spending that much time.



The Solution -
One technique that people often follow is to solve questions related to the same data structure; for example, focusing on questions related to Arrays, then LinkedList, HashMap, Heap, Tree, or Trie, etc.

Although this does provide some organization, it still lacks coherence. For example, many questions can be solved using HashMaps but still require different algorithmic techniques.

I would love to see question sets that follow not only the same data structure but also similar algorithmic techniques.




I have gathered around 20 of these coding problem patterns that I believe can help anyone learn these beautiful algorithmic techniques and make a real difference in the coding interviews.
